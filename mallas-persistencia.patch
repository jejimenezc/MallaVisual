diff --git a/src/utils/malla-io.ts b/src/utils/malla-io.ts
new file mode 100644
index 0000000..c2d9f3a
--- /dev/null
+++ b/src/utils/malla-io.ts
@@ -0,0 +1,76 @@
+// src/utils/malla-io.ts
+import type { BlockTemplate, CurricularPiece } from '../types/curricular';
+import type { VisualTemplate, BlockAspect } from '../types/visual';
+
+export interface MallaExport {
+  version: number;
+  master: {
+    template: BlockTemplate;
+    visual: VisualTemplate;
+    aspect: BlockAspect;
+  };
+  grid?: { cols: number; rows: number };
+  pieces: CurricularPiece[];
+  values: Record<string, Record<string, string | number>>;
+  floatingPieces?: string[];
+}
+
+export const MALLA_SCHEMA_VERSION = 1;
+
+export function exportMalla(data: MallaExport): string {
+  const payload: MallaExport = {
+    version: MALLA_SCHEMA_VERSION,
+    ...data,
+  };
+  return JSON.stringify(payload, null, 2);
+}
+
+export function importMalla(json: string): MallaExport {
+  let parsed: unknown;
+  try {
+    parsed = JSON.parse(json);
+  } catch {
+    throw new Error('JSON inválido');
+  }
+  if (!parsed || typeof parsed !== 'object') {
+    throw new Error('JSON inválido');
+  }
+  const data = parsed as Partial<MallaExport>;
+  if (data.version !== MALLA_SCHEMA_VERSION) {
+    throw new Error('Versión incompatible');
+  }
+  if (!data.master?.template || !data.master?.visual || !data.master?.aspect) {
+    throw new Error('Datos “master” incompletos');
+  }
+  return {
+    version: MALLA_SCHEMA_VERSION,
+    master: data.master,
+    grid: data.grid ?? { cols: 5, rows: 5 },
+    pieces: data.pieces ?? [],
+    values: data.values ?? {},
+    floatingPieces: data.floatingPieces ?? [],
+  };
+}
diff --git a/src/App.tsx b/src/App.tsx
index 1df7abc..3a9d0e2 100644
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -1,16 +1,44 @@
-import React, { useEffect, useState } from 'react';
-import type { JSX } from 'react';
-import { BlockEditorScreen } from './screens/BlockEditorScreen';
-import { MallaEditorScreen } from './screens/MallaEditorScreen';
-import { BlockTemplate } from './types/curricular';
-import { VisualTemplate, BlockAspect } from './types/visual';
-import './App.css';
+import React, { useEffect, useState } from 'react';
+import type { JSX } from 'react';
+import { BlockEditorScreen } from './screens/BlockEditorScreen';
+import { MallaEditorScreen } from './screens/MallaEditorScreen';
+import { BlockTemplate } from './types/curricular';
+import { VisualTemplate, BlockAspect } from './types/visual';
+import { importMalla } from './utils/malla-io';
+import './App.css';
 
 export default function App(): JSX.Element {
-  const [stage, setStage] = useState<'block' | 'malla'>('block');
-  const [block, setBlock] = useState<{
-    template: BlockTemplate;
-    visual: VisualTemplate;
-    aspect: BlockAspect;
-  } | null>(null);
+  const STORAGE_KEY = 'malla-editor-state';
+
+  const [stage, setStage] = useState<'block' | 'malla'>('block');
+  const [block, setBlock] = useState<{
+    template: BlockTemplate;
+    visual: VisualTemplate;
+    aspect: BlockAspect;
+  } | null>(null);
 
   const handleProceed = (
     template: BlockTemplate,
     visual: VisualTemplate,
     aspect: BlockAspect
   ) => {
     setBlock({ template, visual, aspect });
     setStage('malla');
   };
+
+  // Reanudar sesión desde localStorage si hay estado válido
+  useEffect(() => {
+    try {
+      const raw = window.localStorage.getItem(STORAGE_KEY);
+      if (!raw) return;
+      const data = importMalla(raw);
+      setBlock({
+        template: data.master.template,
+        visual: data.master.visual,
+        aspect: data.master.aspect,
+      });
+      setStage('malla');
+    } catch {
+      // Si falla, iniciamos normal sin reanudar
+    }
+  }, []);
 
   return (
     <div className="app-root">
@@ -27,7 +55,13 @@ export default function App(): JSX.Element {
         )}
         {stage === 'malla' && block && (
           <MallaEditorScreen
             template={block.template}
             visual={block.visual}
             aspect={block.aspect}
-            onBack={() => setStage('block')}
+            onBack={() => setStage('block')}
+            onUpdateMaster={(tpl, vis, asp) =>
+              setBlock({ template: tpl, visual: vis, aspect: asp })
+            }
           />
         )}
       </main>
     </div>
   );
 }
diff --git a/src/screens/MallaEditorScreen.tsx b/src/screens/MallaEditorScreen.tsx
index 9f7b1a1..2f0f0d3 100644
--- a/src/screens/MallaEditorScreen.tsx
+++ b/src/screens/MallaEditorScreen.tsx
@@ -1,28 +1,60 @@
-import React, { useEffect, useMemo, useRef, useState } from 'react';
-import type {
-  BlockTemplate,
-  CurricularPiece,
-  CurricularPieceRef,
-  CurricularPieceSnapshot,
-  BlockSourceRef,
-} from '../types/curricular.ts';
-import { TemplateGrid } from '../components/TemplateGrid';
-import type { VisualTemplate, BlockAspect } from '../types/visual.ts';
-import {
-  cropTemplate,
-  cropVisualTemplate,
-  getActiveBounds,
-  expandBoundsToMerges,
-} from '../utils/...';
-import './MallaEditorScreen.css';
+import React, { useEffect, useMemo, useRef, useState } from 'react';
+import type {
+  BlockTemplate,
+  CurricularPiece,
+  CurricularPieceRef,
+  CurricularPieceSnapshot,
+  BlockSourceRef,
+} from '../types/curricular.ts';
+import { TemplateGrid } from '../components/TemplateGrid';
+import type { VisualTemplate, BlockAspect } from '../types/visual.ts';
+import {
+  cropTemplate,
+  cropVisualTemplate,
+  getActiveBounds,
+  expandBoundsToMerges,
+} from '../utils/...';
+import { exportMalla, importMalla } from '../utils/malla-io';
+import './MallaEditorScreen.css';
 
 const GRID_GAP = 2;
 const GRID_PAD = 4;
-const STORAGE_KEY = 'malla-editor-state';
+const STORAGE_KEY = 'malla-editor-state';
 
 interface Props {
   template: BlockTemplate;
   visual: VisualTemplate;
   aspect: BlockAspect;
   onBack?: () => void;
+  onUpdateMaster?: (
+    template: BlockTemplate,
+    visual: VisualTemplate,
+    aspect: BlockAspect
+  ) => void;
 }
 
 export const MallaEditorScreen: React.FC<Props> = ({
   template,
   visual,
   aspect,
   onBack,
+  onUpdateMaster,
 }) => {
   // --- maestro + recorte activo
   const bounds = useMemo(() => getActiveBounds(template), [template]);
   const subTemplate = useMemo(() => cropTemplate(template, bounds), [template, bounds]);
   const baseMetrics = useMemo(() => computeMetrics(subTemplate, aspect), [subTemplate, aspect]);
 
   // --- malla y piezas
-  const [cols, setCols] = useState(5);
-  const [rows, setRows] = useState(5);
-  const [pieces, setPieces] = useState<CurricularPiece[]>([]);
-  const [pieceValues, setPieceValues] = useState<Record<string, Record<string, string | number>>>({});
+  const [cols, setCols] = useState(5);
+  const [rows, setRows] = useState(5);
+  const [pieces, setPieces] = useState<CurricularPiece[]>([]);
+  const [pieceValues, setPieceValues] = useState<
+    Record<string, Record<string, string | number>>
+  >({});
+  const [floatingPieces, setFloatingPieces] = useState<string[]>([]);
   const fileInputRef = useRef<HTMLInputElement>(null);
 
+  // --- debounce simple para autoguardado
+  const saveTimer = useRef<number | null>(null);
+  const scheduleSave = (payload: string) => {
+    if (saveTimer.current) window.clearTimeout(saveTimer.current);
+    saveTimer.current = window.setTimeout(() => {
+      try {
+        window.localStorage.setItem(STORAGE_KEY, payload);
+      } catch {
+        /* ignore */
+      }
+    }, 300);
+  };
+
   // --- Exportar a JSON (incluye master + grid + pieces + values + floating)
-  const handleSave = () => {
-    const data = {
-      master: { template, visual, aspect },
-      grid: { cols, rows },
-      pieces,
-      values: pieceValues,
-    };
-    const json = JSON.stringify(data, null, 2);
+  const handleSave = () => {
+    const json = exportMalla({
+      version: 1,
+      master: { template, visual, aspect },
+      grid: { cols, rows },
+      pieces,
+      values: pieceValues,
+      floatingPieces,
+    });
     const blob = new Blob([json], { type: 'application/json' });
     const url = URL.createObjectURL(blob);
     const a = document.createElement('a');
@@ -34,23 +66,74 @@ export const MallaEditorScreen: React.FC<Props> = ({
   };
 
   const handleLoadClick = () => fileInputRef.current?.click();
 
   const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
     const file = e.target.files?.[0];
     if (!file) return;
     file.text().then((text) => {
       try {
-        const data = JSON.parse(text);
-        if (data.grid) {
-          setCols(data.grid.cols);
-          setRows(data.grid.rows);
-        }
-        setPieces(data.pieces ?? []);
-        setPieceValues(data.values ?? {});
+        const data = importMalla(text);
+        // 1) Actualiza master en App
+        onUpdateMaster?.(data.master.template, data.master.visual, data.master.aspect);
+        // 2) Rehidrata grid/piezas/valores/floating
+        if (data.grid) {
+          setCols(data.grid.cols);
+          setRows(data.grid.rows);
+        }
+        setPieces(data.pieces);
+        setPieceValues(data.values);
+        setFloatingPieces(data.floatingPieces ?? []);
       } catch (err) {
         console.error('Error cargando malla:', err);
       } finally {
         if (e.target) e.target.value = '';
       }
     });
   };
 
+  // --- Autoguardado (debounced) en localStorage
+  useEffect(() => {
+    if (typeof window === 'undefined') return;
+    const json = exportMalla({
+      version: 1,
+      master: { template, visual, aspect },
+      grid: { cols, rows },
+      pieces,
+      values: pieceValues,
+      floatingPieces,
+    });
+    scheduleSave(json);
+    // eslint-disable-next-line react-hooks/exhaustive-deps
+  }, [template, visual, aspect, cols, rows, pieces, pieceValues, floatingPieces]);
+
+  // --- Rehidratación inicial desde localStorage (si existe)
+  useEffect(() => {
+    if (typeof window === 'undefined') return;
+    try {
+      const raw = window.localStorage.getItem(STORAGE_KEY);
+      if (!raw) return;
+      const data = importMalla(raw);
+      onUpdateMaster?.(data.master.template, data.master.visual, data.master.aspect);
+      if (data.grid) {
+        setCols(data.grid.cols);
+        setRows(data.grid.rows);
+      }
+      setPieces(data.pieces);
+      setPieceValues(data.values);
+      setFloatingPieces(data.floatingPieces ?? []);
+    } catch {
+      /* ignore */
+    }
+  }, [onUpdateMaster]);
+
   return (
     <div className="malla-editor">
       {/* ... resto del render */}
       <input
         ref={fileInputRef}
         type="file"
         accept="application/json"
         style={{ display: 'none' }}
         onChange={handleFileChange}
       />
     </div>
   );
 };

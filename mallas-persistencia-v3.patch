--- a/src/utils/malla-io.ts
+++ b/src/utils/malla-io.ts
@@ -0,0 +1,53 @@
+// src/utils/malla-io.ts

+import type { BlockTemplate, CurricularPiece } from '../types/curricular';

+import type { VisualTemplate, BlockAspect } from '../types/visual';

+

+export interface MallaExport {

+  version: number;

+  master: {

+    template: BlockTemplate;

+    visual: VisualTemplate;

+    aspect: BlockAspect;

+  };

+  grid?: { cols: number; rows: number };

+  pieces: CurricularPiece[];

+  values: Record<string, Record<string, string | number>>;

+  floatingPieces?: string[];

+}

+

+export const MALLA_SCHEMA_VERSION = 1;

+

+export function exportMalla(data: MallaExport): string {

+  const payload: MallaExport = {

+    version: MALLA_SCHEMA_VERSION,

+    ...data,

+  };

+  return JSON.stringify(payload, null, 2);

+}

+

+export function importMalla(json: string): MallaExport {

+  let parsed: unknown;

+  try {

+    parsed = JSON.parse(json);

+  } catch {

+    throw new Error('JSON inválido');

+  }

+  if (!parsed || typeof parsed !== 'object') {

+    throw new Error('JSON inválido');

+  }

+  const data = parsed as Partial<MallaExport>;

+  if (data.version !== MALLA_SCHEMA_VERSION) {

+    throw new Error('Versión incompatible');

+  }

+  if (!data.master?.template || !data.master?.visual || !data.master?.aspect) {

+    throw new Error('Datos “master” incompletos');

+  }

+  return {

+    version: MALLA_SCHEMA_VERSION,

+    master: data.master,

+    grid: data.grid ?? { cols: 5, rows: 5 },

+    pieces: data.pieces ?? [],

+    values: data.values ?? {},

+    floatingPieces: data.floatingPieces ?? [],

+  };

+}

--- a/src/App.tsx
+++ b/src/App.tsx
@@ -5,9 +5,11 @@
 import { MallaEditorScreen } from './screens/MallaEditorScreen';

 import { BlockTemplate } from './types/curricular';

 import { VisualTemplate, BlockAspect } from './types/visual';

+import { importMalla } from './utils/malla-io';

 import './App.css';

 

 export default function App(): JSX.Element {

+  const STORAGE_KEY = 'malla-editor-state';

   const [stage, setStage] = useState<'block' | 'malla'>('block');

   const [block, setBlock] = useState<{

     template: BlockTemplate;

@@ -24,7 +26,21 @@
     setStage('malla');

   };

   

-  return (

+  useEffect(() => {

+  try {

+    const raw = window.localStorage.getItem(STORAGE_KEY);

+    if (!raw) return;

+    const data = importMalla(raw);

+    setBlock({

+      template: data.master.template,

+      visual: data.master.visual,

+      aspect: data.master.aspect,

+    });

+    setStage('malla');

+  } catch {}

+}, []);

+

+return (

     <div className="app-container">

       <header className="app-header"><h1>Mallas Curriculares</h1></header>

       <main className="app-main">

@@ -36,6 +52,7 @@
             template={block.template}

             visual={block.visual}

             aspect={block.aspect}

+            onUpdateMaster={(tpl, vis, asp) => setBlock({ template: tpl, visual: vis, aspect: asp })}

             onBack={() => setStage('block')}

           />

         )}

--- a/src/screens/MallaEditorScreen.tsx
+++ b/src/screens/MallaEditorScreen.tsx
@@ -19,6 +19,7 @@
 import { BlockSnapshot, getCellSizeByAspect } from '../components/BlockSnapshot';

 import { duplicateActiveCrop } from '../utils/block-clone.ts';

 import './MallaEditorScreen.css';

+import { exportMalla, importMalla } from '../utils/malla-io';

 

 /** Mantener estos valores en sync con .template-grid (BlockTemplateEditor.css) */

 const GRID_GAP = 2; // px

@@ -60,6 +61,7 @@
   visual: VisualTemplate;

   aspect: BlockAspect;

   onBack?: () => void;

+  onUpdateMaster?: (template: BlockTemplate, visual: VisualTemplate, aspect: BlockAspect) => void;

 }

 

 export const MallaEditorScreen: React.FC<Props> = ({

@@ -76,10 +78,21 @@
   // --- malla y piezas

   const [cols, setCols] = useState(5);

   const [rows, setRows] = useState(5);

-  const [pieces, setPieces] = useState<CurricularPiece[]>([]);

+  const [grid: { cols, rows },

+      pieces, setPieces] = useState<CurricularPiece[]>([]);

   const [pieceValues, setPieceValues] = useState<Record<string, Record<string, string | number>>>({});

   const [floatingPieces, setFloatingPieces] = useState<string[]>([]);

   const fileInputRef = useRef<HTMLInputElement>(null);

+

+  // Debounce para autoguardado

+  const saveTimer = useRef<number | null>(null);

+  const scheduleSave = (payload: string) => {

+    if (saveTimer.current) window.clearTimeout(saveTimer.current);

+    saveTimer.current = window.setTimeout(() => {

+      try { window.localStorage.setItem(STORAGE_KEY, payload); } catch {}

+    }, 300);

+  };

+  };

 

   // --- drag & drop

   const [draggingId, setDraggingId] = useState<string | null>(null);

@@ -101,7 +114,8 @@
 

     // --- persistencia

   const handleSave = () => {

-    const data = { master: { template, visual, aspect }, pieces, values: pieceValues };

+    const data = { master: { template, visual, aspect }, grid: { cols, rows },

+      pieces, values: pieceValues };

     const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });

     const url = URL.createObjectURL(blob);

     const a = document.createElement('a');

@@ -134,13 +148,15 @@
 

   useEffect(() => {

     if (typeof window === 'undefined') return;

-    const data = { master: { template, visual, aspect }, pieces, values: pieceValues };

+    const data = { master: { template, visual, aspect }, grid: { cols, rows },

+      pieces, values: pieceValues };

     try {

       window.localStorage.setItem(STORAGE_KEY, JSON.stringify(data));

     } catch {

       /* ignore */

     }

-  }, [template, visual, aspect, pieces, pieceValues]);

+  }, [template, visual, aspect, grid: { cols, rows },

+      pieces, pieceValues]);

 

   useEffect(() => {

     if (typeof window === 'undefined') return;

@@ -474,4 +490,4 @@
       </div>

     </div>

   );

-};

+};